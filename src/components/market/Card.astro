---
import BASE_URL, { endpoints } from "../../data/endpoints";
import type {
    MarketPlayer,
    PlayerData,
    PlayerStats,
    MarketValue,
} from "../../types/api";
import { DataManager } from "../../managers/data";

interface CardProps {
    marketPlayer: MarketPlayer;
}

const { marketPlayer } = Astro.props as CardProps;

const dataManager = new DataManager(5 * 60 * 1000);
await dataManager.connect();
await dataManager.init();

async function getPlayerData(playerId: string) {
    try {
        const playerStats = await dataManager.get<PlayerStats>(
            `${BASE_URL}${endpoints.playerStats(playerId)}`,
        );
        const playerMarketValue = await dataManager.get<MarketValue[]>(
            `${BASE_URL}${endpoints.playerMarketValue(playerId)}`,
        );

        if (!playerStats || !playerMarketValue) {
            throw new Error("Failed to fetch player data");
        }

        return { stats: playerStats, marketValueHistory: playerMarketValue };
    } catch (error) {
        console.error("Error fetching player data:", error);
        return null;
    }
}

// Enhanced Metrics Calculations
const calculateMetrics = (playerData: PlayerData) => {
    const mvHistory = playerData.marketValueHistory;
    const stats = playerData.stats;
    
    // Basic Metrics
    const pointsPerMillion = stats.marketValue > 0 
        ? (stats.points / (stats.marketValue / 1000000)).toFixed(2)
        : "N/A";

    // Value Momentum (last 5 periods)
    const recentValues = mvHistory.slice(-5);
    let momentum = 0;
    for (let i = 1; i < recentValues.length; i++) {
        if (recentValues[i].marketValue > recentValues[i - 1].marketValue) {
            momentum++;
        } else if (recentValues[i].marketValue < recentValues[i - 1].marketValue) {
            momentum--;
        }
    }

    // Volatility calculation
    const values = mvHistory.map(mv => mv.marketValue);
    const avgValue = values.reduce((a, b) => a + b, 0) / values.length;
    const variance = values.reduce((a, b) => a + Math.pow(b - avgValue, 2), 0) / values.length;
    const volatility = Math.sqrt(variance) / avgValue * 100;

    // ROI calculation (Return on Investment)
    const latestValue = mvHistory[mvHistory.length - 1].marketValue;
    const oldestValue = mvHistory[0].marketValue;
    const roi = ((latestValue - oldestValue) / oldestValue * 100).toFixed(2);

    // Bid Trend Analysis
    const bidHistory = mvHistory.map(mv => mv.bids);
    const bidTrend = bidHistory[bidHistory.length - 1] - bidHistory[bidHistory.length - 2];
    const avgBids = bidHistory.reduce((a, b) => a + b, 0) / bidHistory.length;

    // Performance Efficiency
    const efficiencyScore = stats.averagePoints > 0 
        ? ((stats.points / stats.marketValue) * stats.averagePoints).toFixed(2)
        : "N/A";

    // Market Value Peaks
    const maxValue = Math.max(...values);
    const minValue = Math.min(...values);
    const currentToMaxRatio = ((latestValue / maxValue) * 100).toFixed(2);

    // Value Stability Score (0-100)
    const stabilityScore = Math.max(0, 100 - volatility).toFixed(1);

    return {
        pointsPerMillion,
        valueMomentum: momentum > 0 ? "Increasing" : momentum < 0 ? "Decreasing" : "Stable",
        volatility: volatility.toFixed(2),
        roi,
        bidTrend,
        avgBids: avgBids.toFixed(1),
        efficiencyScore,
        maxValue,
        minValue,
        currentToMaxRatio,
        stabilityScore,
        valueChange: latestValue - oldestValue,
        valueChangePercentage: ((latestValue - oldestValue) / oldestValue * 100).toFixed(2)
    };
};

const playerData: PlayerData | null = await getPlayerData(
    marketPlayer!.playerMaster.id,
);
let showBanner = false;
if (playerData === null) {
    showBanner = true;
    return;
}

const metrics = calculateMetrics(playerData);
const latestMarketValue = playerData.marketValueHistory[playerData.marketValueHistory.length - 1];
console.log(metrics.avgBids)
---


{
    showBanner ? (
        <div class="bg-red-600 text-white p-4 rounded-lg shadow-md text-center mx-4 md:mx-auto">
            <p class="font-bold">Data Unavailable</p>
            <p>We are unable to retrieve the player's data at the moment. Please try again later.</p>
        </div>
    ) : (
        <div class="bg-gray-900 rounded-xl shadow-2xl overflow-hidden mx-4 md:mx-auto max-w-screen-xl">
            <div class="p-4 md:p-6 lg:p-8">
                {/* Player Header Section - Responsive */}
                <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6 space-y-4 md:space-y-0">
                    <div class="flex flex-col sm:flex-row items-center sm:items-start md:items-center space-y-4 sm:space-y-0 sm:space-x-4">
                        <img
                            src={playerData!.stats.images.transparent["256x256"]}
                            alt={`${playerData!.stats.name} avatar`}
                            class="w-20 h-20 rounded-full border-4 border-gray-700 object-cover"
                        />
                        <div class="text-center sm:text-left">
                            <h2 class="text-xl md:text-2xl font-bold text-white">
                                {playerData!.stats.name}
                            </h2>
                            <p class="text-gray-400">
                                {playerData!.stats.position} - {playerData!.stats.team.name}
                            </p>
                            <div class="flex items-center justify-center sm:justify-start mt-1">
                                <img
                                    src={playerData!.stats.team.badgeColor}
                                    alt={`${playerData!.stats.team.name} badge`}
                                    class="w-6 h-6 mr-2"
                                />
                                <span class="text-gray-300">
                                    {playerData!.stats.playerStatus}
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="text-center md:text-right">
                        <div class="text-sm text-gray-400">Overall Rating</div>
                        <div class="text-2xl md:text-3xl font-bold text-white">
                            {metrics.efficiencyScore}
                        </div>
                    </div>
                </div>

                {/* Key Metrics Grid - Responsive */}
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
                    <div class="bg-gray-800 p-4 rounded-lg">
                        <div class="flex items-center justify-between mb-2">
                            <span class="text-gray-400">Current Value</span>
                        </div>
                        <div class="text-xl md:text-2xl font-bold text-white">
                            ${playerData!.stats.marketValue.toLocaleString()}
                        </div>
                        <div class={`text-sm ${metrics.valueChange >= 0 ? "text-green-400" : "text-red-400"} flex items-center mt-1`}>
                            <span class={`mr-1 ${metrics.valueChange >= 0 ? "text-green-400" : "text-red-400"}`}>
                                {metrics.valueChange >= 0 ? "↑" : "↓"}
                            </span>
                            {metrics.valueChangePercentage}%
                        </div>
                    </div>
                    <div class="bg-gray-800 p-4 rounded-lg">
                        <div class="text-gray-400 mb-2">Market Activity (Bids)</div>
                        <div class="text-xl md:text-2xl font-bold text-white">
                            {latestMarketValue.bids}
                        </div>
                        <div class={`text-sm ${metrics.bidTrend >= 0 ? "text-green-400" : "text-red-400"}`}>
                            {metrics.bidTrend >= 0 ? "+" : ""}{metrics.bidTrend} vs prev.
                        </div>
                    </div>
                    <div class="bg-gray-800 p-4 rounded-lg sm:col-span-2 lg:col-span-1">
                        <div class="text-gray-400 mb-2">Value Stability</div>
                        <div class="text-xl md:text-2xl font-bold text-white">
                            {metrics.stabilityScore}/100
                        </div>
                        <div class="text-sm text-gray-400">
                            Volatility: {metrics.volatility}%
                        </div>
                    </div>
                </div>

                {/* Advanced Metrics Section - Responsive */}
                <div class="bg-gray-800 p-4 rounded-lg mb-6">
                    <h3 class="text-lg font-semibold text-white mb-4">Performance Metrics</h3>
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <div class="p-2">
                            <div class="whitespace-nowrap text-sm text-gray-400 mb-1">Points/Million €</div>
                            <div class="text-lg md:text-xl font-bold text-white">{metrics.pointsPerMillion}</div>
                        </div>
                        <div class="p-2">
                            <div class="text-sm text-gray-400 mb-1">ROI</div>
                            <div class="text-lg md:text-xl font-bold text-white">{metrics.roi}%</div>
                        </div>
                        <div class="p-2">
                            <div class="text-sm text-gray-400 mb-1">Peak Value Ratio</div>
                            <div class="text-lg md:text-xl font-bold text-white">{metrics.currentToMaxRatio}%</div>
                        </div>
                        <div class="p-2">
                            <div class="text-sm text-gray-400 mb-1">Avg. Bids</div>
                            <div class="text-lg md:text-xl font-bold text-white" ></div>{metrics.avgBids}</div>
                        </div>
                    </div>
                </div>

                {/* Performance Stats - Responsive */}
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                    <div class="bg-gray-800 p-4 rounded-lg">
                        <h3 class="text-lg font-semibold text-white mb-4">Season Performance</h3>
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <div class="text-sm text-gray-400 mb-1">Total Points</div>
                                <div class="text-lg md:text-xl font-bold text-white">
                                    {playerData!.stats.points}
                                </div>
                            </div>
                            <div>
                                <div class="text-sm text-gray-400 mb-1">Avg. Points</div>
                                <div class="text-lg md:text-xl font-bold text-white">
                                    {playerData!.stats.averagePoints.toFixed(2)}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="bg-gray-800 p-4 rounded-lg">
                        <h3 class="text-lg font-semibold text-white mb-4">Value Momentum</h3>
                        <div class="flex items-center justify-between">
                            <div>
                                <div class="text-sm text-gray-400 mb-1">Trend</div>
                                <div class="text-lg md:text-xl font-bold text-white">
                                    {metrics.valueMomentum}
                                </div>
                            </div>
                            <div class={`text-3xl md:text-4xl ${
                                metrics.valueMomentum === "Increasing" ? "text-green-400" : 
                                metrics.valueMomentum === "Decreasing" ? "text-red-400" : 
                                "text-yellow-400"
                            }`}>
                                {metrics.valueMomentum === "Increasing" ? "↗" : 
                                 metrics.valueMomentum === "Decreasing" ? "↘" : "→"}
                            </div>
                        </div>
                    </div>
                </div>

                {/* Market Value History Chart - Responsive */}
                <div class="bg-gray-800 p-4 rounded-lg">
                    <h3 class="text-lg font-semibold text-white mb-4">Value History</h3>
                    <div class="relative h-32 md:h-40 lg:h-48 bg-gray-700 rounded-lg overflow-hidden">
                        <div class="absolute inset-0 flex items-end">
                            {playerData!.marketValueHistory.map((entry, index) => {
                                const barHeight = ((entry.marketValue - metrics.minValue) / 
                                    (metrics.maxValue - metrics.minValue)) * 100;
                                return (
                                    <div
                                        class="flex-1 bg-gradient-to-t from-green-600 to-green-400 transition-all duration-300 ease-in-out"
                                        style={{ height: `${barHeight}%` }}
                                        title={`${new Date(entry.date).toLocaleDateString()}: $${entry.marketValue.toLocaleString()}`}
                                    />
                                );
                            })}
                        </div>
                    </div>
                    <div class="flex justify-between mt-2">
                        <span class="text-xs md:text-sm text-gray-400">
                            ${metrics.minValue.toLocaleString()}
                        </span>
                        <span class="text-xs md:text-sm text-gray-400">
                            ${metrics.maxValue.toLocaleString()}
                        </span>
                    </div>
                </div>
            </div>
        </div>
    )
}